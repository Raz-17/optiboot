
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007f00  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00007c00  00007c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000394  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .stab         00000e04  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010db  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002277  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007c00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table,
  //   so entry to this function will always be here, indepedent of compilation,
  //   features etc
  asm volatile (
    7c00:	01 c0       	rjmp	.+2      	; 0x7c04 <main>
    7c02:	02 c1       	rjmp	.+516    	; 0x7e08 <do_spm>

00007c04 <main>:
    7c04:	11 24       	eor	r1, r1
    7c06:	84 b7       	in	r24, 0x34	; 52
    7c08:	88 23       	and	r24, r24
    7c0a:	61 f0       	breq	.+24     	; 0x7c24 <main+0x20>
    7c0c:	98 2f       	mov	r25, r24
    7c0e:	9a 70       	andi	r25, 0x0A	; 10
    7c10:	92 30       	cpi	r25, 0x02	; 2
    7c12:	41 f0       	breq	.+16     	; 0x7c24 <main+0x20>
    7c14:	81 ff       	sbrs	r24, 1
    7c16:	02 c0       	rjmp	.+4      	; 0x7c1c <main+0x18>
    7c18:	97 ef       	ldi	r25, 0xF7	; 247
    7c1a:	94 bf       	out	0x34, r25	; 52
    7c1c:	28 2e       	mov	r2, r24
    7c1e:	80 e0       	ldi	r24, 0x00	; 0
    7c20:	de d0       	rcall	.+444    	; 0x7dde <watchdogConfig>
    7c22:	ee c1       	rjmp	.+988    	; 0x8000 <optiboot_version+0x2>
    7c24:	85 e0       	ldi	r24, 0x05	; 5
    7c26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    7c2a:	82 e0       	ldi	r24, 0x02	; 2
    7c2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7c30:	88 e1       	ldi	r24, 0x18	; 24
    7c32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    7c36:	86 e0       	ldi	r24, 0x06	; 6
    7c38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    7c3c:	80 e1       	ldi	r24, 0x10	; 16
    7c3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    7c42:	8e e0       	ldi	r24, 0x0E	; 14
    7c44:	cc d0       	rcall	.+408    	; 0x7dde <watchdogConfig>
    7c46:	25 9a       	sbi	0x04, 5	; 4
    7c48:	86 e0       	ldi	r24, 0x06	; 6
    7c4a:	20 e3       	ldi	r18, 0x30	; 48
    7c4c:	3c ef       	ldi	r19, 0xFC	; 252
    7c4e:	91 e0       	ldi	r25, 0x01	; 1
    7c50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    7c54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    7c58:	96 bb       	out	0x16, r25	; 22
    7c5a:	b0 9b       	sbis	0x16, 0	; 22
    7c5c:	fe cf       	rjmp	.-4      	; 0x7c5a <main+0x56>
    7c5e:	1d 9a       	sbi	0x03, 5	; 3
    7c60:	a8 95       	wdr
    7c62:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7c66:	47 fd       	sbrc	r20, 7
    7c68:	02 c0       	rjmp	.+4      	; 0x7c6e <main+0x6a>
    7c6a:	81 50       	subi	r24, 0x01	; 1
    7c6c:	89 f7       	brne	.-30     	; 0x7c50 <main+0x4c>
    7c6e:	ee 24       	eor	r14, r14
    7c70:	e3 94       	inc	r14
    7c72:	35 e0       	ldi	r19, 0x05	; 5
    7c74:	d3 2e       	mov	r13, r19
    7c76:	41 e1       	ldi	r20, 0x11	; 17
    7c78:	c4 2e       	mov	r12, r20
    7c7a:	a3 d0       	rcall	.+326    	; 0x7dc2 <getch>
    7c7c:	81 34       	cpi	r24, 0x41	; 65
    7c7e:	71 f4       	brne	.+28     	; 0x7c9c <main+0x98>
    7c80:	a0 d0       	rcall	.+320    	; 0x7dc2 <getch>
    7c82:	18 2f       	mov	r17, r24
    7c84:	b2 d0       	rcall	.+356    	; 0x7dea <verifySpace>
    7c86:	12 38       	cpi	r17, 0x82	; 130
    7c88:	11 f4       	brne	.+4      	; 0x7c8e <main+0x8a>
    7c8a:	81 e0       	ldi	r24, 0x01	; 1
    7c8c:	05 c0       	rjmp	.+10     	; 0x7c98 <main+0x94>
    7c8e:	11 38       	cpi	r17, 0x81	; 129
    7c90:	11 f4       	brne	.+4      	; 0x7c96 <main+0x92>
    7c92:	89 e0       	ldi	r24, 0x09	; 9
    7c94:	01 c0       	rjmp	.+2      	; 0x7c98 <main+0x94>
    7c96:	83 e0       	ldi	r24, 0x03	; 3
    7c98:	8d d0       	rcall	.+282    	; 0x7db4 <putch>
    7c9a:	89 c0       	rjmp	.+274    	; 0x7dae <main+0x1aa>
    7c9c:	82 34       	cpi	r24, 0x42	; 66
    7c9e:	11 f4       	brne	.+4      	; 0x7ca4 <main+0xa0>
    7ca0:	84 e1       	ldi	r24, 0x14	; 20
    7ca2:	03 c0       	rjmp	.+6      	; 0x7caa <main+0xa6>
    7ca4:	85 34       	cpi	r24, 0x45	; 69
    7ca6:	19 f4       	brne	.+6      	; 0x7cae <main+0xaa>
    7ca8:	85 e0       	ldi	r24, 0x05	; 5
    7caa:	a7 d0       	rcall	.+334    	; 0x7dfa <getNch>
    7cac:	80 c0       	rjmp	.+256    	; 0x7dae <main+0x1aa>
    7cae:	85 35       	cpi	r24, 0x55	; 85
    7cb0:	39 f4       	brne	.+14     	; 0x7cc0 <main+0xbc>
    7cb2:	87 d0       	rcall	.+270    	; 0x7dc2 <getch>
    7cb4:	c8 2f       	mov	r28, r24
    7cb6:	85 d0       	rcall	.+266    	; 0x7dc2 <getch>
    7cb8:	d8 2f       	mov	r29, r24
    7cba:	cc 0f       	add	r28, r28
    7cbc:	dd 1f       	adc	r29, r29
    7cbe:	76 c0       	rjmp	.+236    	; 0x7dac <main+0x1a8>
    7cc0:	86 35       	cpi	r24, 0x56	; 86
    7cc2:	21 f4       	brne	.+8      	; 0x7ccc <main+0xc8>
    7cc4:	84 e0       	ldi	r24, 0x04	; 4
    7cc6:	99 d0       	rcall	.+306    	; 0x7dfa <getNch>
    7cc8:	80 e0       	ldi	r24, 0x00	; 0
    7cca:	e6 cf       	rjmp	.-52     	; 0x7c98 <main+0x94>
    7ccc:	84 36       	cpi	r24, 0x64	; 100
    7cce:	09 f0       	breq	.+2      	; 0x7cd2 <main+0xce>
    7cd0:	43 c0       	rjmp	.+134    	; 0x7d58 <main+0x154>
    7cd2:	77 d0       	rcall	.+238    	; 0x7dc2 <getch>
    7cd4:	76 d0       	rcall	.+236    	; 0x7dc2 <getch>
    7cd6:	18 2f       	mov	r17, r24
    7cd8:	74 d0       	rcall	.+232    	; 0x7dc2 <getch>
    7cda:	08 2f       	mov	r16, r24
    7cdc:	a1 2c       	mov	r10, r1
    7cde:	bb 24       	eor	r11, r11
    7ce0:	b3 94       	inc	r11
    7ce2:	6f d0       	rcall	.+222    	; 0x7dc2 <getch>
    7ce4:	f5 01       	movw	r30, r10
    7ce6:	81 93       	st	Z+, r24
    7ce8:	5f 01       	movw	r10, r30
    7cea:	1e 13       	cpse	r17, r30
    7cec:	fa cf       	rjmp	.-12     	; 0x7ce2 <main+0xde>
    7cee:	7d d0       	rcall	.+250    	; 0x7dea <verifySpace>
    7cf0:	84 b1       	in	r24, 0x04	; 4
    7cf2:	84 b9       	out	0x04, r24	; 4
    7cf4:	8c b5       	in	r24, 0x2c	; 44
    7cf6:	8c bd       	out	0x2c, r24	; 44
    7cf8:	8c b5       	in	r24, 0x2c	; 44
    7cfa:	8c bd       	out	0x2c, r24	; 44
    7cfc:	05 34       	cpi	r16, 0x45	; 69
    7cfe:	81 f4       	brne	.+32     	; 0x7d20 <main+0x11c>
    7d00:	4e 01       	movw	r8, r28
    7d02:	a1 2c       	mov	r10, r1
    7d04:	bb 24       	eor	r11, r11
    7d06:	b3 94       	inc	r11
    7d08:	1a 15       	cp	r17, r10
    7d0a:	09 f4       	brne	.+2      	; 0x7d0e <main+0x10a>
    7d0c:	50 c0       	rjmp	.+160    	; 0x7dae <main+0x1aa>
    7d0e:	f5 01       	movw	r30, r10
    7d10:	61 91       	ld	r22, Z+
    7d12:	5f 01       	movw	r10, r30
    7d14:	c4 01       	movw	r24, r8
    7d16:	90 d0       	rcall	.+288    	; 0x7e38 <eeprom_write_byte>
    7d18:	ff ef       	ldi	r31, 0xFF	; 255
    7d1a:	8f 1a       	sub	r8, r31
    7d1c:	9f 0a       	sbc	r9, r31
    7d1e:	f4 cf       	rjmp	.-24     	; 0x7d08 <main+0x104>
    7d20:	83 e0       	ldi	r24, 0x03	; 3
    7d22:	fe 01       	movw	r30, r28
    7d24:	87 bf       	out	0x37, r24	; 55
    7d26:	e8 95       	spm
    7d28:	07 b6       	in	r0, 0x37	; 55
    7d2a:	00 fc       	sbrc	r0, 0
    7d2c:	fd cf       	rjmp	.-6      	; 0x7d28 <main+0x124>
    7d2e:	a0 e0       	ldi	r26, 0x00	; 0
    7d30:	b1 e0       	ldi	r27, 0x01	; 1
    7d32:	fe 01       	movw	r30, r28
    7d34:	8d 91       	ld	r24, X+
    7d36:	9d 91       	ld	r25, X+
    7d38:	0c 01       	movw	r0, r24
    7d3a:	e7 be       	out	0x37, r14	; 55
    7d3c:	e8 95       	spm
    7d3e:	11 24       	eor	r1, r1
    7d40:	32 96       	adiw	r30, 0x02	; 2
    7d42:	1a 13       	cpse	r17, r26
    7d44:	f7 cf       	rjmp	.-18     	; 0x7d34 <main+0x130>
    7d46:	fe 01       	movw	r30, r28
    7d48:	d7 be       	out	0x37, r13	; 55
    7d4a:	e8 95       	spm
    7d4c:	07 b6       	in	r0, 0x37	; 55
    7d4e:	00 fc       	sbrc	r0, 0
    7d50:	fd cf       	rjmp	.-6      	; 0x7d4c <main+0x148>
    7d52:	c7 be       	out	0x37, r12	; 55
    7d54:	e8 95       	spm
    7d56:	2b c0       	rjmp	.+86     	; 0x7dae <main+0x1aa>
    7d58:	84 37       	cpi	r24, 0x74	; 116
    7d5a:	d9 f4       	brne	.+54     	; 0x7d92 <main+0x18e>
    7d5c:	32 d0       	rcall	.+100    	; 0x7dc2 <getch>
    7d5e:	31 d0       	rcall	.+98     	; 0x7dc2 <getch>
    7d60:	f8 2e       	mov	r15, r24
    7d62:	2f d0       	rcall	.+94     	; 0x7dc2 <getch>
    7d64:	b8 2e       	mov	r11, r24
    7d66:	41 d0       	rcall	.+130    	; 0x7dea <verifySpace>
    7d68:	8e 01       	movw	r16, r28
    7d6a:	f5 e4       	ldi	r31, 0x45	; 69
    7d6c:	bf 12       	cpse	r11, r31
    7d6e:	09 c0       	rjmp	.+18     	; 0x7d82 <main+0x17e>
    7d70:	c8 01       	movw	r24, r16
    7d72:	5a d0       	rcall	.+180    	; 0x7e28 <eeprom_read_byte>
    7d74:	1f d0       	rcall	.+62     	; 0x7db4 <putch>
    7d76:	fa 94       	dec	r15
    7d78:	0f 5f       	subi	r16, 0xFF	; 255
    7d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    7d7c:	f1 10       	cpse	r15, r1
    7d7e:	f8 cf       	rjmp	.-16     	; 0x7d70 <main+0x16c>
    7d80:	16 c0       	rjmp	.+44     	; 0x7dae <main+0x1aa>
    7d82:	f8 01       	movw	r30, r16
    7d84:	85 91       	lpm	r24, Z+
    7d86:	8f 01       	movw	r16, r30
    7d88:	15 d0       	rcall	.+42     	; 0x7db4 <putch>
    7d8a:	fa 94       	dec	r15
    7d8c:	f1 10       	cpse	r15, r1
    7d8e:	f9 cf       	rjmp	.-14     	; 0x7d82 <main+0x17e>
    7d90:	0e c0       	rjmp	.+28     	; 0x7dae <main+0x1aa>
    7d92:	85 37       	cpi	r24, 0x75	; 117
    7d94:	39 f4       	brne	.+14     	; 0x7da4 <main+0x1a0>
    7d96:	29 d0       	rcall	.+82     	; 0x7dea <verifySpace>
    7d98:	8e e1       	ldi	r24, 0x1E	; 30
    7d9a:	0c d0       	rcall	.+24     	; 0x7db4 <putch>
    7d9c:	85 e9       	ldi	r24, 0x95	; 149
    7d9e:	0a d0       	rcall	.+20     	; 0x7db4 <putch>
    7da0:	8f e0       	ldi	r24, 0x0F	; 15
    7da2:	7a cf       	rjmp	.-268    	; 0x7c98 <main+0x94>
    7da4:	81 35       	cpi	r24, 0x51	; 81
    7da6:	11 f4       	brne	.+4      	; 0x7dac <main+0x1a8>
    7da8:	88 e0       	ldi	r24, 0x08	; 8
    7daa:	19 d0       	rcall	.+50     	; 0x7dde <watchdogConfig>
    7dac:	1e d0       	rcall	.+60     	; 0x7dea <verifySpace>
    7dae:	80 e1       	ldi	r24, 0x10	; 16
    7db0:	01 d0       	rcall	.+2      	; 0x7db4 <putch>
    7db2:	63 cf       	rjmp	.-314    	; 0x7c7a <main+0x76>

00007db4 <putch>:
}

void putch(char ch) {
#if (SOFT_UART == 0)
  #ifndef LIN_UART
    while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    7db4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7db8:	95 ff       	sbrs	r25, 5
    7dba:	fc cf       	rjmp	.-8      	; 0x7db4 <putch>
  #else
    while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
  #endif

  UART_UDR = ch;
    7dbc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    7dc0:	08 95       	ret

00007dc2 <getch>:
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||	\
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||	\
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7dc2:	1d 9a       	sbi	0x03, 5	; 3
    :
      "r25"
);
#else
#ifndef LIN_UART
  while(!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    7dc4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dc8:	87 ff       	sbrs	r24, 7
    7dca:	fc cf       	rjmp	.-8      	; 0x7dc4 <getch+0x2>
  if (!(UART_SRA & _BV(FE0))) {
    7dcc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    7dd0:	84 fd       	sbrc	r24, 4
    7dd2:	01 c0       	rjmp	.+2      	; 0x7dd6 <getch+0x14>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7dd4:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7dd6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||	\
    defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||	\
    defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  LED_PIN |= _BV(LED);
    7dda:	1d 9a       	sbi	0x03, 5	; 3
#endif
#endif

  return ch;
}
    7ddc:	08 95       	ret

00007dde <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
 #ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7dde:	e0 e6       	ldi	r30, 0x60	; 96
    7de0:	f0 e0       	ldi	r31, 0x00	; 0
    7de2:	98 e1       	ldi	r25, 0x18	; 24
    7de4:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif 

#ifdef WDTCSR
  WDTCSR = x;
    7de6:	80 83       	st	Z, r24
    7de8:	08 95       	ret

00007dea <verifySpace>:
void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
    7dea:	eb df       	rcall	.-42     	; 0x7dc2 <getch>
    7dec:	80 32       	cpi	r24, 0x20	; 32
    7dee:	19 f0       	breq	.+6      	; 0x7df6 <verifySpace+0xc>
    7df0:	88 e0       	ldi	r24, 0x08	; 8
    7df2:	f5 df       	rcall	.-22     	; 0x7dde <watchdogConfig>
    7df4:	ff cf       	rjmp	.-2      	; 0x7df4 <verifySpace+0xa>
    7df6:	84 e1       	ldi	r24, 0x14	; 20
    7df8:	dd cf       	rjmp	.-70     	; 0x7db4 <putch>

00007dfa <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7dfa:	cf 93       	push	r28
    7dfc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7dfe:	e1 df       	rcall	.-62     	; 0x7dc2 <getch>
    7e00:	c1 50       	subi	r28, 0x01	; 1
    7e02:	e9 f7       	brne	.-6      	; 0x7dfe <getNch+0x4>
  verifySpace();
}
    7e04:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7e06:	f1 cf       	rjmp	.-30     	; 0x7dea <verifySpace>

00007e08 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
    // Do spm stuff
    asm volatile (
    7e08:	fc 01       	movw	r30, r24
    7e0a:	0a 01       	movw	r0, r20
    7e0c:	67 bf       	out	0x37, r22	; 55
    7e0e:	e8 95       	spm
    7e10:	11 24       	eor	r1, r1
    );

    // wait for spm to complete
    //   it doesn't have much sense for __BOOT_PAGE_FILL,
    //   but it doesn't hurt and saves some bytes on 'if'
    boot_spm_busy_wait();
    7e12:	07 b6       	in	r0, 0x37	; 55
    7e14:	00 fc       	sbrc	r0, 0
    7e16:	fd cf       	rjmp	.-6      	; 0x7e12 <do_spm+0xa>
#if defined(RWWSRE)
    // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
    // but it's tweaked a little assuming that in every command we are interested in here, there
    // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
    if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    7e18:	66 70       	andi	r22, 0x06	; 6
    7e1a:	29 f0       	breq	.+10     	; 0x7e26 <do_spm+0x1e>
    7e1c:	45 2b       	or	r20, r21
    7e1e:	19 f4       	brne	.+6      	; 0x7e26 <do_spm+0x1e>
      // Reenable read access to flash
      __boot_rww_enable_short();
    7e20:	81 e1       	ldi	r24, 0x11	; 17
    7e22:	87 bf       	out	0x37, r24	; 55
    7e24:	e8 95       	spm
    7e26:	08 95       	ret

00007e28 <eeprom_read_byte>:
    7e28:	f9 99       	sbic	0x1f, 1	; 31
    7e2a:	fe cf       	rjmp	.-4      	; 0x7e28 <eeprom_read_byte>
    7e2c:	92 bd       	out	0x22, r25	; 34
    7e2e:	81 bd       	out	0x21, r24	; 33
    7e30:	f8 9a       	sbi	0x1f, 0	; 31
    7e32:	99 27       	eor	r25, r25
    7e34:	80 b5       	in	r24, 0x20	; 32
    7e36:	08 95       	ret

00007e38 <eeprom_write_byte>:
    7e38:	26 2f       	mov	r18, r22

00007e3a <eeprom_write_r18>:
    7e3a:	f9 99       	sbic	0x1f, 1	; 31
    7e3c:	fe cf       	rjmp	.-4      	; 0x7e3a <eeprom_write_r18>
    7e3e:	1f ba       	out	0x1f, r1	; 31
    7e40:	92 bd       	out	0x22, r25	; 34
    7e42:	81 bd       	out	0x21, r24	; 33
    7e44:	20 bd       	out	0x20, r18	; 32
    7e46:	0f b6       	in	r0, 0x3f	; 63
    7e48:	f8 94       	cli
    7e4a:	fa 9a       	sbi	0x1f, 2	; 31
    7e4c:	f9 9a       	sbi	0x1f, 1	; 31
    7e4e:	0f be       	out	0x3f, r0	; 63
    7e50:	01 96       	adiw	r24, 0x01	; 1
    7e52:	08 95       	ret

00007e54 <f_version>:
    7e54:	56 65 72 73 69 6f 6e 3d 38 2e 31 00                 Version=8.1.

00007e60 <fOPTIBOOT_CUSTOMVER>:
    7e60:	4f 50 54 49 42 4f 4f 54 5f 43 55 53 54 4f 4d 56     OPTIBOOT_CUSTOMV
    7e70:	45 52 3d 31 00                                      ER=1.

00007e75 <f_device>:
    7e75:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 33 32 38     Device=atmega328
    7e85:	70 00                                               p.

00007e87 <fF_CPU>:
    7e87:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

00007e97 <fBIGBOOT>:
    7e97:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

00007ea1 <f_date>:
    7ea1:	42 75 69 6c 74 3a 44 65 63 20 20 37 20 32 30 32     Built:Dec  7 202
    7eb1:	30 3a 32 32 3a 32 37 3a 35 31 00                    0:22:27:51.

00007ebc <fUART>:
    7ebc:	55 41 52 54 3d 30 00                                UART=0.

00007ec3 <fBAUD_RATE>:
    7ec3:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

00007ed4 <f_LED>:
    7ed4:	4c 45 44 3d 42 35 00                                LED=B5.

00007edb <fLED_DATA_FLASH>:
    7edb:	4c 45 44 5f 44 41 54 41 5f 46 4c 41 53 48 3d 31     LED_DATA_FLASH=1
	...

00007eec <fLED_START_FLASHES>:
    7eec:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
    7efc:	53 3d 33 00                                         S=3.
